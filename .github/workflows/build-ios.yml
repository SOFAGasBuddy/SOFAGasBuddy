name: Build iOS

on:
  workflow_dispatch:
  #push:
    #branches: [ "main" ]
    #paths-ignore:
      #- "**.md"
      #- '**/*.gitignore'
      #- '**/*.gitattributes'
      #- '**/*.yml'
      #- '**.txt'
      #- '**/*.txt'
  
  #pull_request:
    #branches: [ "main" ]

jobs:
  build:
    runs-on: macos-latest
    steps:
    
  # These expire on a yearly basis, so check if they're still valid!
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATES_P12 }}
        P12_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        ls $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        ls $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        echo "$? create-keychain"
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        echo "$? Keychain settings"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        echo  "$? Keychain unlocked"

        ls $KEYCHAIN_PATH
        
        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - uses: actions/checkout@v3
      name: Checkout repo
   
    - uses: maxim-lobanov/setup-xcode@v1
      name: Set XCode version
      with:
        xcode-version: 15.0
      
    - name: Download Provisioning Profiles
      id: provisioning
      uses: apple-actions/download-provisioning-profiles@v1
      with: 
        bundle-id: com.cyberaustin.sofagasbuddy
        profile-type: 'IOS_APP_STORE'
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEYID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 8.0.x
        
    - name: Install .NET MAUI
      run: dotnet workload install maui
      
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build SOFAGasBuddy.csproj -c Release -f net8.0-ios /p:ArchiveOnBuild=true /p:EnableAssemblyILStripping=false
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        path: |
          ./**/*.app

    - name: Upload app to TestFlight
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: ${{ github.workspace }}/${{ inputs.project-folder }}/bin/${{ inputs.build-config }}/${{ inputs.dotnet-version-target }}-ios/ios-arm64/publish/${{ inputs.project-folder }}.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEYID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
